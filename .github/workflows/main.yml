# This is a basic workflow to help you get started with Actions

name: Patchcords CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
  # The type of runner that the job will run on
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Latest MSVC",
            os: windows-2022,
            build_type: "Debug",
            cc: "cl",
            cxx: "cl",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            generators: "Visual Studio 17 2022"
          }
        - {
            name: "Ubuntu Latest GCC",
            os: ubuntu-latest,
            build_type: "Debug",
            cc: "gcc",
            cxx: "g++",
            generators: "Ninja"
          }

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: 'true'

    - name: install valgrind
      run: sudo apt-get install -y gcc valgrind cmake

    # Runs a single command using the runners shell
    - name: Run linux build script
      run: $GITHUB_WORKSPACE/scripts/build_coverage.sh


      - name: Print env
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}
      - name: Install dependencies on windows
        if: startsWith(matrix.config.os, 'windows')
        run: |
          choco install ninja cmake
          ninja --version
          cmake --version

      - name: Install dependencies on ubuntu
        if: startsWith(matrix.config.name, 'Ubuntu_Latest_GCC')
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc ninja-build valgrind cmake
          ninja --version
          cmake --version
          gcc --version

      - name: Configure
        shell: bash
        run: |
          mkdir build
          cmake -S . -B . \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
            -G "${{ matrix.config.generators }}" \
            -Dpatchcords_ut:BOOL=ON -Denable_tls_lib:BOOL=ON \
            -DCMAKE_INSTALL_PREFIX:PATH=instdir
      - name: Build
        shell: bash
        run: cmake --build . --config ${{ matrix.config.build_type }}

      - name: Run test on ${{ matrix.config.name }}
        shell: bash
        run: ctest -C "debug" -V --output-on-failure
